\subsection{What does systems thinking have to do with IT?}
\label{_what_does_systems_thinking_have_to_do_with_it}\hyperlabel{_what_does_systems_thinking_have_to_do_with_it}%
  
In an engineering sense, positive feedback is often dangerous and a topic of concern. The classic example of bad positive feedback in engineering is the collapse of the Tacoma Narrows bridge, "Galloping Gertie."
 \begin{wrapfigure}{r}{0.5\textwidth}

\begin{center}
\imgexists{images/2_00-bridge.jpg}{{\imgevalsize{images/2_00-bridge.jpg}{\includegraphics[width=0.48\textwidth]{images/2_00-bridge.jpg}}}}{collapsing bridge}
\end{center}
\caption[{"Galloping Gertie" }]{"Galloping Gertie" \footnotemark{}}
\end{wrapfigure}
 
As with bridges, at a technical level, reinforcing feedback can be a very bad thing in IT systems. In general, any process that is self-{}amplified without any balancing feedback will eventually consume all available resources, just like rabbits will eat all the food available to them. So, if you create a process (e.g. write and run a computer program) that recursively spawns itself, it will sooner or later crash the computer as it devours memory and CPU. See \href{http://osr507doc.sco.com/en/HANDBOOK/runaway_proc.html}{Runaway processes.}
 
Balancing feedback, on the other hand, is critical to make sure you are \textquotedblleft{}staying on track.\textquotedblright{} Engineers use concepts of \href{https://en.wikipedia.org/wiki/Control_theory}{control theory}, for example \href{https://en.wikipedia.org/wiki/Damping}{damping}, to keep bridges from falling down.
 
Remember in Chapter 1 we talked of the user's \href{http://dm-academy.github.io/aitm/images/1_01-ITStack2.png}{value experience}, and also how services \href{http://dm-academy.github.io/aitm/#_the_it_service_lifecycle}{evolve over time in a lifecycle}? In terms of the \hyperlink{dual-axis-vc}{dual-{}axis value chain}, there are two primary digital value experiences:
 \begin{itemize}

\item{} The value the user derives from the service (e.g. account lookups, or a flawless navigational experience)
 

\item{} The value the investor derives from monetizing the product, or comparable incentives (e.g. nonprofit missions)
 
\end{itemize}
 
Additionally, the product team derives career value. This becomes more of a factor later in the game. We will discuss this further in chapter 7 on organization, and Part IV on architecture lifecycles \& technical debt.
 
The product team receives feedback from both value experiences. The day to day interactions with the service (e.g. help desk and operations) are understood, and (typically on a more intermittent basis) the portfolio investor also feeds back the information to the product team (the boss's boss comes for a visit).
 
Balancing feedback in a business and IT context takes a wide variety of forms:
 \begin{itemize}

\item{} The results of a product test in the marketplace, for example do the users prefer a drop down box or check boxes on a form?
 

\item{} The product owner clarifying for developers their user experience vision for the product, based on a demonstration of developer work in process
 

\item{} The end users calling to tell you the \textquotedblleft{}system is slow\textquotedblright{} (or down)
 

\item{} The product owner or portfolio sponsor calling to tell you they are not satisfied with the system's value
 
\end{itemize}
 
In short, we see these two basic kinds of feedback:
 \begin{itemize}

\item{} Positive/Reinforcing, \textquotedblleft{}do more of that\textquotedblright{}
 

\item{} Negative/Balancing, \textquotedblleft{}stop doing that,\textquotedblright{} \textquotedblleft{}fix that\textquotedblright{}
 
\end{itemize}
 
You should consider:
 \begin{itemize}

\item{} How you are accepting and executing on feedback signals
 

\item{} How the feedback relationship with your investors is evolving, in terms of your product direction
 

\item{} How the feedback relationship with your users is evolving, in terms of both operational criteria and product direction
 
\end{itemize}
 
One of the most important concepts related to feedback, one we will keep returning to, is that product value is based on feedback. We've discussed \hyperlink{lean-startup}{Lean Startup}, which represents a feedback loop intended to discover product value. Don Reinertsen, whose work we will discuss in this chapter, has written extensively on the importance of fast feedback to the product discovery process.
 
\subsubsection{Positive feedback: the special case investors want}
\label{_positive_feedback_the_special_case_investors_want}\hyperlabel{_positive_feedback_the_special_case_investors_want}%
  
At a business level, there is a special kind of reinforcing feedback that defines the successful business:
 \begin{wrapfigure}{r}{0.5\textwidth}

\begin{center}
\imgexists{images/2_00-biz-positive.png}{{\imgevalsize{images/2_00-biz-positive.png}{\includegraphics[width=0.48\textwidth]{images/2_00-biz-positive.png}}}}{positive business feedback}
\end{center}
\caption{The reinforcing feedback businesses want}
\end{wrapfigure}
 
This is reinforcing feedback and positive for most people involved: investors, customers, employees. At some point, if the cycle continues, it will run into balancing feedback:
 \begin{itemize}

\item{} Competition
 

\item{} Market saturation
 

\item{} Negative externalities (regulation, pollution, etc)
 
\end{itemize}
 
But those are problems the business wants to have.
 
\label{open-loop}\hyperlabel{open-loop}
  
\subsubsection{Open versus closed loop systems}
\label{_open_versus_closed_loop_systems}\hyperlabel{_open_versus_closed_loop_systems}%
  
Finally, we should talk briefly about open loop versus closed loop systems.
 \begin{itemize}

\item{} Open loop systems have no regulation, no balancing feedback
 

\item{} Closed loop systems have some form of balancing feedback
 
\end{itemize}
 
In navigation terminology, the open-{}loop attempt to stick to a course without external information (e.g. navigating in the fog, without radar or communications) is known as " \href{https://en.wikipedia.org/wiki/Dead_reckoning}{dead reckoning}," in part because it can easily get you dead!
 
A good example of an open loop system is the children's game \textquotedblleft{}pin the tail on the donkey.\textquotedblright{} In \textquotedblleft{}pin the tail on the donkey,\textquotedblright{} a person has to execute a process (pinning a paper or cloth "tail" onto a poster of a donkey -{} no live donkeys are involved!) while blindfolded, based on their memory of their location (and perhaps after being deliberately disoriented by spinning in circles). Since they are blindfolded, they have to move across the room and pin the tail without the ongoing corrective feedback of their eyes. (Perhaps they are getting feedback from their friends, but perhaps their friends are not reliable\ldots{}.)
 \begin{wrapfigure}{r}{0.5\textwidth}

\begin{center}
\imgexists{images/2_00-donkey.jpg}{{\imgevalsize{images/2_00-donkey.jpg}{\includegraphics[width=0.48\textwidth]{images/2_00-donkey.jpg}}}}{donkey game}
\end{center}
\caption[{Pin the tail on the donkey }]{Pin the tail on the donkey \footnotemark{}}
\end{wrapfigure}
 
Without the blindfold, it would be a closed loop system. The person would rise from their chair and, through the ongoing feedback of their eyes to their central nervous system, would move towards the donkey and pin the tail in the correct location.
 
This may seem obvious, but the history of IT management (some would say all management) over the past decades has been the struggle to overcome open-{}loop practices. Reliance on open-{}loop practices is arguably an indication of a dysfunctional culture. A IT team that is designing and delivering without sufficient corrective feedback from its stakeholders is an ineffective, open-{}loop system. \hyperlink{Kennaley2010}{[Kennaley2010]} applies these principles to software development in much greater depth, and is recommended.
 \begin{DBKadmonition}{}{Note}
 
No system can ever be fully "open loop" indefinitely.  Sooner or later, you take off the blindfold, or wind up on the rocks.
 \end{DBKadmonition}
 
Engineers of complex systems use feedback techniques extensively. Complex systems do not work without them.
 
\label{OODA}\hyperlabel{OODA}
  
\subsubsection{OODA}
\label{_ooda}\hyperlabel{_ooda}%
  
After the Korean War, the US Air Force wished to clarify why its pilots had performed in a superior manner to the opposing pilots who were flying aircraft viewed as more capable. A colonel named John Boyd was tasked with researching the problem. His conclusions are based in the concept of feedback cycles, and how fast humans can execute them.  determined that humans go through a defined process in building their mental model of complex and dynamic situations. This has been formalized in the concept of the OODA loop. Standing for:
 \begin{itemize}

\item{} Observe
 

\item{} Orient
 

\item{} Decide
 

\item{} Act
 
\end{itemize}
 
Because the US fighters were lighter, more maneuverable, and had better visibility, their pilots were able to execute the OODA loop more quickly than their opponents, leading to victory. Boyd and others have extended this concept into various other domains including business strategy. The concept of the OODA feedback loop is frequently mentioned in presentations on Agile methods. Tightening the OODA loop accelerates the discovery of product value and is highly desirable.
 
\label{product-mgmt-chap}\hyperlabel{product-mgmt-chap}
    
