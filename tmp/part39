\subsection{Test-{}driven development and refactoring}
\label{_test_driven_development_and_refactoring}\hyperlabel{_test_driven_development_and_refactoring}%
  
Testing software and systems is a critically important part of digital product development. The earliest concepts of \hyperlink{Agile-history}{waterfall development} called for it explicitly, and "software tester" as a role and "software quality assurance" as a practice have long histories. Evolutionary approaches to software have a potential major issue with software testing:
 \begin{quote}

As a consequence of the introduction of new bugs, program maintenance requires far more system testing per statement written than any other programming. Theoretically, after each fix one must run the entire bank of test cases previously run against the system, to ensure that it has not been damaged in an obscure way.
In practice such regression testing must indeed approximate this theoretical ideal, and it is very costly.

\hspace*\fill--- Fred Brooks
\emph{Mythical Man-{}Month} \end{quote}
 
This issue was and is well known to thought leaders in Agile software development. The key response has been the concept of automated testing, so that any change in the software can be immediately validated before more development along those lines continues. One pioneering tool was JUnit:
 \begin{quote}

\emph{The reason JUnit is important . . . is that the presence of this tiny tool has been essential to a fundamental shift for many programmers. A shift where testing has moved to a front and central part of programming. People have advocated it before, but JUnit made it happen more than anything else.}

\hspace*\fill--- Martin Fowler
\emph{http://martinfowler.com/books/meszaros.html} \end{quote}
 
From the reality that regression testing was "very costly" (as stated by Brooks in the above quote), the emergence of tools like JUnit (coupled with increasing computer power and availability) changed the face of software development, allowing the ongoing evolution of software systems in ways not previously possible.
 
\subsubsection{Test-{}driven development}
\label{_test_driven_development}\hyperlabel{_test_driven_development}%
  
In test-{}driven development, the idea essence is to write code that tests itself, and in fact to \textbf{write the test before writing any code}. This is done through the creation of test harnesses and the tight association of tests with requirements. The logical culmination of test-{}driven development was expressed by Kent Beck in \emph{eXtreme Programming}: write the test first \hyperlink{Beck2000}{[Beck2000]}. Thus:
 \begin{enumerate}[label=\arabic*.]

\item{} Given a \textquotedblleft{}user story\textquotedblright{} (i.e \href{http://dm-academy.github.io/aitm/#_describing_system_intent}{system intent}), figure out a test that will demonstrate its successful implementation.
 

\item{} Write this test using the established testing framework.
 

\item{} Write the code that fulfills the test.
 
\end{enumerate}
 
Some readers may be thinking, \textquotedblleft{}I know how to write a little code, but what is this about using code to write a test?\textquotedblright{}
 
While we avoid much in-{}depth examination of source code in this book, using some simplified Java will help. Here is an example drawn from the  \href{https://github.com/CharlesTBetz/Calavera}{Calavera project}, the basis for the companion labs to this book.
 \begin{DBKadmonition}{warning}{Important}
 
Just read through the example carefully. You do not need to know Java.
 \end{DBKadmonition}
 
Let's say we want a function that will take a string of characters (e.g. a sentence) and wrap it in some \href{https://en.wikipedia.org/wiki/HTML}{HTML} \textquotedblleft{}Heading 1\textquotedblright{} tags. We will name the class \textquotedblleft{}H1Class\textquotedblright{} and (by convention) we will start by developing a class called TestH1Class.
 
We write the test first:
 
\begin{lstlisting}[firstnumber=1,backgroundcolor={},basicstyle=\ttfamily,]
public class TestClass1 {
 private H1Class a;  //
 @Before
 public void setUp() throws Exception {
  this.a = new H1Class("TestWebMessage");
 }
 @Test
  public void testTrue() {
    assertEquals("string correctly generated",
     "<h1>TestWebMessage</h1>",
     this.a.webMessage());// string built correctly
  }
}
\end{lstlisting}
 
The code above basically states,
 

\begin{sidebar}
\begin{enumerate}[label=\arabic*.]

\item{} Set up the object to be tested
 

\item{} pass in a message with the content "TestWebMessage"
 

\item{} the test passess if we get back "<{}h1>{}TestWebMessage<{}/h1>{}" -{} the original message surrounded by <{}h1>{} and <{}/h1>{} "tags," which are part of HTML.
 
\end{enumerate}
\end{sidebar}
 
We run the test (e.g. through Junit and Ant, which we won't detail here). It will fail. Then, we write the class:
 
\begin{lstlisting}[firstnumber=1,backgroundcolor={},basicstyle=\ttfamily,]
 public class H1Class {
  String strMsg;
  public String webMessage()
    {
      return "<h1>" + strMsg + "</h1>";
    }
}
\end{lstlisting}
 \begin{DBKadmonition}{warning}{Important}
 
These are simplified examples.
 \end{DBKadmonition}
 
When we run the test harness correctly (e.g. using a build tool such as Ant or Maven), the test class will perform the following actions:
 \begin{enumerate}[label=\arabic*.]

\item{} create an instance of the class H1Class, based on a string \textquotedblleft{}TestWebMessage\textquotedblright{}
 

\item{} confirm that the returned string is \textquotedblleft{}<{}h1>{}TestWebMessage<{}/h1>{}\textquotedblright{}
 
\end{enumerate}
 
If that string is not correctly generated, or the class cannot be created, or any other error occurs, the test fails and this is then reported via error results at the console, or (in the case of automated build) will be detected by the build manager and displayed as the build outcome. Other languages use different approaches from that shown here, but every serious platform at this point supports test-{}driven development.
 
The associated course lab provides a simple but complete example of a test-{}driven development environment, based on lightweight virtualization.
 
Employing test-{}driven development completely and correctly requires thought and experience. But it has emerged as a practice in the largest scale systems in the world. Google runs many millions of automated tests daily \hyperlink{Whittaker2012}{[Whittaker2012]}.  It has even been successfully employed in hardware development \hyperlink{Gruver2013}{[Gruver2013]}.
 
\label{refactoring}\hyperlabel{refactoring}
  
\subsubsection{Refactoring}
\label{_refactoring}\hyperlabel{_refactoring}%
  \begin{quote}

Refactoring is a controlled technique for improving the design of an existing code base. Its essence is applying a series of small behavior-{}preserving transformations, each of which is "too small to be worth doing". However, the cumulative effect of each of these transformations is quite significant. By doing them in small steps you reduce the risk of introducing errors. You also avoid having the system broken while you are carrying out the restructuring -{} which allows you to gradually refactor a system over an extended period of time.

\hspace*\fill--- Martin Fowler
\emph{Refactoring -{}-{} http://refactoring.com/} \end{quote}
 
\label{technical-debt-1}\hyperlabel{technical-debt-1}
 
Test-{}driven development enables the next major practice, that of refactoring. Refactoring is how you address technical debt. What is technical debt? Technical debt is a term coined by Ward Cunningham, and is now defined by Wikipedia as
 
\emph{\ldots{}the eventual consequences of poor system design, software architecture or software development within a codebase. The debt can be thought of as work that needs to be done before a particular job can be considered complete or proper. If the debt is not repaid, then it will keep on accumulating interest, making it hard to implement changes later on\ldots{}\hspace{0em} Analogous to monetary debt, technical debt is not necessarily a bad thing, and sometime technical debt is required to move projects forward.} \hyperlink{Wikipedia2016}{[Wikipedia2016]}
 
Test driven development ensures that the system's functionality remains consistent, while refactoring provides a means to address technical debt as part of ongoing development activities. Prioritizing the relative investment of repaying technical debt versus developing new functionality will be examined in future sections, but at least you now know the tools and concepts.
 
We discuss technical debt further in \hyperlink{technical-debt}{Chapter 12}.
   
