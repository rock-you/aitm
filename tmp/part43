\subsection{Conclusion}
\label{_conclusion_2}\hyperlabel{_conclusion_2}%
  
Applications are why computers exist. Supporting applications increasingly is less about systems engineering, and more about quickly provisioning standard, shared infrastructure. Application development has moved decisively in the past twenty years to Agile delivery models, based on techniques such as:
 \begin{itemize}

\item{} story mapping
 

\item{} test-{}driven development
 

\item{} refactoring
 

\item{} continuous integration
 

\item{} continuous deployment
 
\end{itemize}
 
Application delivery, software development, and the Agile movement are broad, complex, and evolving topics. For those of you familiar with Agile, we have only scratched the surface in this chapter. In future chapters we will go into more detail on topics such as:
 \begin{itemize}

\item{} Product management, including behavior-{}driven development and continuous design (much more on requirements, user stories, etc)
 

\item{} The importance of feedback
 

\item{} Prioritization and cost of delay
 

\item{} Scrum and Kanban
 

\item{} Tracking tasks and effort
 

\item{} Closing the loop from operations to development, and coping with interrupt-{}driven work
 
\end{itemize}
 
and much more.
 
\subsubsection{Discussion questions}
\label{_discussion_questions_3}\hyperlabel{_discussion_questions_3}%
  \begin{itemize}

\item{} What is your exposure to application programming?
 

\item{} Can you think of examples of waterfall and agile approaches in your daily life (not necessarily related to IT?)
 

\item{} Have you been on a project that needed more planning (IT or not)? For example, have you ever gone to the hardware store 5 times in one day, and felt by the end that you should have thought a little more at first?
 

\item{} Have you ever been in a situation where planning never seemed to end? Why?
 

\item{} If you are a developer, read * \href{http://www.joelonsoftware.com/articles/fog0000000069.html}{Things You Should Never Do, Part I}. What do you think? Are you ever tempted to re-{}write something instead of figuring out how it works?
 
\end{itemize}
  
\subsubsection{Research \& practice}
\label{_research_practice_3}\hyperlabel{_research_practice_3}%
  \begin{itemize}

\item{} Review the debates over Agile in \emph{IEEE Software} in the early 2000s and write a retrospective report on the thinking at the time.
 

\item{} Review Amazon's \href{https://aws.amazon.com/codepipeline/}{AWS CodePipeline}
 

\item{} Download the \href{https://github.com/CharlesTBetz/Calavera}{Calavera project} and run it on your laptop or workstation. \href{https://github.com/CharlesTBetz/Calavera/blob/master/docs/Installation.md}{Instructions. }
 

\item{} Enhance Calavera to support Amazon VMs, or the MEAN stack, or Maven, or Travis CI.
 
\end{itemize}
  
\subsubsection{Further reading}
\label{_further_reading_3}\hyperlabel{_further_reading_3}%
  
\textbf{Books}
 \begin{itemize}

\item{} Martin Fowler, \href{http://www.goodreads.com/book/show/44936.Refactoring}{\emph{Refactoring}}
 

\item{} McConnell, Steve, \href{http://www.goodreads.com/book/show/4845.Code_Complete}{\emph{Code Complete}}.
 

\item{} Jez Humble \& David Farley, \href{http://www.goodreads.com/book/show/8686650-continuous-delivery}{\emph{Continuous Delivery}}
 

\item{} Gene Kim et al, \href{http://www.goodreads.com/book/show/17255186-the-phoenix-project}{\emph{Phoenix Project}}
 

\item{} Paul Duvall et al, \href{http://www.goodreads.com/book/show/1311542.Continuous_Integration}{\emph{Continuous Integration}}
 

\item{} Michael Nygard, \href{http://www.goodreads.com/book/show/1069827.Release_It_}{\emph{Release IT}}
 
\end{itemize}
 
\textbf{Articles}
 \begin{itemize}

\item{} \href{https://dzone.com/articles/you-are-not-paid-to-write-code}{You are not paid to write code}
 

\item{} \href{http://www.joelonsoftware.com/articles/fog0000000069.html}{Things You Should Never Do, Part I}
 

\item{} \href{http://www.thoughtworks.com/insights/blog/introducing-software-testing-cupcake-anti-pattern}{Introducing the Software Testing Cupcake (Anti-{}Pattern)}
 

\item{} \href{https://dzone.com/articles/release-testing-is-risk-management-theatre}{Release Testing is Risk Management Theater}
 

\item{} \href{http://www.yegor256.com/2014/10/08/continuous-integration-is-dead.html}{Continuous Integration is Dead}
 

\item{} \href{http://bitquabit.com/post/unorthodocs-abandon-your-dvcs-and-return-to-sanity/}{Abandon your DVCS and Return to Sanity}
 

\item{} Marcel Birkner \href{https://blog.codecentric.de/en/2015/10/continuous-integration-platform-using-docker-container-jenkins-sonarqube-nexus-gitlab/}{Continuous Integration Platform using Docker Container: Jenkins, SonarQube, Nexus, GitLab}
 
\end{itemize}
    
