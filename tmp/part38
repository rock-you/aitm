\subsection{Describing system intent}
\label{_describing_system_intent}\hyperlabel{_describing_system_intent}%
  
So, you've got an idea for a product value experience, and you have tools for creating it and infrastructure for running it. It's time to start building shippable product. As we will cover in more detail in the next chapter, the product development process starts with a concept of requirements (whether we call it story, use case, or scenario is not important). Requirements are numerous and evolving, and we're going to take some time looking at the process of converting them into IT-{}based functionality. There is history here back to the earliest days of computing.
 
In order to design and build a digital product, you need to express what you need the product to do. The conceptual tool used to do this is called Requirement.
The literal word \textquotedblleft{}Requirement\textquotedblright{} has fallen out of favor with the rise of Agile \hyperlink{Patton2014}{[Patton2014]}, and has a number of synonyms and variations:
 \begin{itemize}

\item{} Use case
 

\item{} User story
 

\item{} Nonfunctional requirement
 

\item{} Epic
 

\item{} Architectural epic
 

\item{} Architectural requirement
 
\end{itemize}
 
While these may differ in terms of focus and scope, the basic concept is the same -{} the requirement, however named, expresses some intent or constraint the system must fulfill. This intent calls for work to be performed.
 

\begin{sidebar}

\textbf{Sidebar: The troubled term "requirements"}

In earlier times, the concept of "requirements" was often used as an sort of defense mechanism. Statements would often be heard such as:

"We can't start building anything, we don't fully understand the requirements"

"We can't change the requirements now, we've started building! Make up your mind!"

"The product is a failure because the business kept changing their mind about the requirements."

While the term "requirements" is still used throughout much education and training, the student should be aware of this history, and the fact that many Agile practitioners discourage use of the term.

As Jeff Patton says, "\ldots{}\hspace{0em}I learned the word requirements actually means \emph{shut up}." \hyperlink{Patton2014}{[Patton2014]}, introduction.
\end{sidebar}
 
User Story Mapping is a well known approach \hyperlink{Patton2014}{[Patton2014]} with origins in the Scrum community. Here is an example from \hyperlink{Cohn2010}{[Cohn2010]}
 
"As a shopper, I can select how I want items shipped based on the actual costs of shipping to my address so that I can make the best decision."
 
The basic format is,
 
As a <{} type of user >{}, I want <{} goal >{}, so that <{} some value >{}.
 
The story concept is flexible, and can be aggregated and decomposed in various ways, as we will discuss in Chapter 4. Our interest here is in the basic stimulus for application development work that it represents.
 
You don't need an extensively automated system at this stage to capture requirements, but you need \textbf{something}. It could be a spreadsheet, or a shared word processing document, or sticky notes on a whiteboard (we'll talk about Kanban in the next section.) The important thing is to start somewhere, with team agreement as to what the approach is, so you can move forward collaboratively.
 
We will discuss approaches for "discovering" user stories and product features in Chapter 4, where Product Management is formalized. For now, as an early startup of one or two people, it is sufficient that you have some basic ability to characterize your system intent\hspace{0.167em}\textemdash{}\hspace{0.167em}more formalized techniques come later.
  
