\subsection{Infrastructure overview}
\label{_infrastructure_overview}\hyperlabel{_infrastructure_overview}%
  
In the previous chapter, you were introduced to the concept of a Moment of Truth, and in the final exercises asked to think of a product idea. Some part of that product requires writing software, or at least configuring some IT-{}centric system. (IT being defined as in \href{http://dm-academy.github.io/aitm/#_defining_information_technology}{Chapter 1}.) You presumably have some resources (time and money). It's Monday morning, you have cleared all distractions, shut down your Twitter and Facebook feeds, and are ready to start building.
 
Not so fast.
 
Before you can start writing code, you need some kind of a platform. It's hard to build before you decide on your tools. You need to decide what language you are going to write in, or what framework you are going to configure, and how that effort is going to result in an operational system capable of rendering IT services. You are probably swimming in a sea of advice and options regarding your technical choices. In previous decades, books such as this might have gone into the specifics of particular platforms: mainframe vs. minicomputers, COBOL vs Fortran, Windows vs Unix, etc.
 
At this writing, JavaScript is a leading choice, in conjunction with various frameworks and NoSQL options (e.g. the MEAN stack, for MongoDB, Express, Angular, and Node.js), but millions of developers are still writing Java and .Net, and Ruby and Python have significant followings. Linux is arguably the leading platform, but commercial Unix and Microsoft platforms are still strong. And, periodically it's reported that the majority of the world's transactions \textbf{still} run on \href{http://blog.hackerrank.com/the-inevitable-return-of-cobol/}{COBOL-{}based systems}.
 
However, in the past few years, some powerful infrastructure concepts have solidified that are independent of particular platforms:
 \begin{itemize}

\item{} "Cloud"-{}based technology services
 

\item{} Automation and \textquotedblleft{}infrastructure as code\textquotedblright{}
 

\item{} The centrality of source control
 

\item{} The importance of package management
 

\item{} Policy-{}based infrastructure management
 
\end{itemize}
 
(We'll get to test-{}driven development, pipeline automation \& DevOps in the next chapter.)
 
This might seem like a detour -{} you are in a hurry to start writing code! But industry practice is clear. You check your code into source control from Day One. You define your server configurations as recipes, manifests, or at least shell scripts, and check those definitions into source control as well. You keep track of what you have downloaded from the Internet and what version of stuff you are using, through package management (which uses different tools than source control). Always downloading the \textquotedblleft{}latest\textquotedblright{} package from its upstream creator might seem like the way to stay current, but it will kill you when stuff works on one server but not on another.
 
So, you need to understand a few things and make a few decisions that you will be living with for a while, and will not be easily changed.
 
\label{what-is-IT-infrastructure}\hyperlabel{what-is-IT-infrastructure}
 
\subsubsection{What is Infrastructure?}
\label{_what_is_infrastructure}\hyperlabel{_what_is_infrastructure}%
  
Infrastructure is a tricky word. Google defines it thus:
 
\emph{The basic physical and organizational structures and facilities (e.g., buildings, roads, and power supplies) needed for the operation of a society or enterprise.}
 
In general, it connotes the stuff behind the scenes, the things you need but don't want to spend a lot of time thinking about. We will spend a lot of time examining what we mean by \textquotedblleft{}infrastructure\textquotedblright{} in this book, as it is fundamental to understanding the \textquotedblleft{}business of IT.\textquotedblright{} This book defines \textquotedblleft{}IT infrastructure\textquotedblright{} recursively as \textquotedblleft{}the set of IT concerns that are of particular interest to IT.\textquotedblright{}
 \begin{itemize}

\item{} An application or business service is consumed by people who are NOT primarily concerned with IT. For example, a customer-{}facing online banking service is consumed by end users.
 

\item{} An IT infrastructure service is a service consumed by other IT-{}centric teams and capabilities. For example, a database or a load balancing service is consumed by other IT teams.
 
\end{itemize}
 
IT infrastructure is one form of infrastructure. Other kinds of infrastructure might include mechanical, electrical, and plant investments (ME \& P). IT infrastructure, like IT itself, is defined by its fundamental dependence on information and computing theory [link Chapter 1].
 \begin{DBKadmonition}{}{Note}
 
Today's application becomes tomorrow's infrastructure. Forty years ago, building an \textquotedblleft{}application\textquotedblright{} would have included building its database, perhaps even its file management. This was rightly determined to be a general-{}case problem that could be the basis for commodity software, and so companies like Oracle were born.  Operating systems took on more and more functionality, technology became more and more reliable and easily configured, and once unique (and competitively differentiating) functionality became commoditized and more and more deeply buried in the \textquotedblleft{}stack\textquotedblright{}: the IT infrastructure.
 \end{DBKadmonition}
  
\subsubsection{Basic IT infrastructure concepts}
\label{_basic_it_infrastructure_concepts}\hyperlabel{_basic_it_infrastructure_concepts}%
  
There are many books (some in the Further Reading section for this chapter) on all aspects of IT infrastructure, which is a broad and deep topic. Our discussion of it here has to be high level, as appropriate for a survey course. We've established \href{http://dm-academy.github.io/aitm/#_defining_information_technology}{what we mean by IT generally}. Pragmatically, there are three major physical aspects to "IT infrastructure" relevant to the practitioner:
 \begin{itemize}

\item{} Computing cycles (sometimes called just "compute")
 

\item{} Memory \& storage (or "storage")
 

\item{} Networking \& communications (or "network")
 
\end{itemize}
 
We will discuss a variety of subsidiary concerns and concepts, but those are the big three.
 
\textbf{Compute} is the resource that performs the rapid, clock-{}driven digital logic that transforms data inputs to outputs.
 \begin{DBKadmonition}{}{Tip}
 
For a beginner-{}level introduction to the world of digital logic at its most fundamental, see  \href{http://www.goodreads.com/book/show/44882.Code}{\emph{Code}}, by Charles Petzold.
 \end{DBKadmonition}
 
If we have a picture of our friend, and we use a digital filter to adjust the brightness, that is an application of compute power. The picture is made up of "pixels" which are nothing but numbers representing the color of some tiny square of the picture. Each of those numbers needs to be evaluated and the brightness adjusted. There may be millions in a single image.
 \begin{wrapfigure}{r}{0.5\textwidth}

\begin{center}
\imgexists{images/1_02-bitmap.png}{{\imgevalsize{images/1_02-bitmap.png}{\includegraphics[width=0.48\textwidth]{images/1_02-bitmap.png}}}}{bitmap}
\end{center}
\caption[{Picture enlarged to show pixels }]{Picture enlarged to show pixels \footnotemark{}}
\end{wrapfigure}
 
For example, let's say that the pixel values range from 1 to 10, with 1 being the darkest and 10 being the lightest (in reality, the range is much larger.) To brighten a picture, we might tell the computer:
 \begin{enumerate}[label=\arabic*.]

\item{} Look at a pixel
 

\item{} If it is between 0 and 3 add 2
 

\item{} If it is between 4 and 6 add 1
 

\item{} Move to a new pixel
 

\item{} Repeat the above 4 lines until all pixels are done
 
\end{enumerate}
 
At a more realistic level, the process might be executed as a batch on a workstation, for hundreds or thousands of photos at a time.
 
Computers process instructions at the level of "true" and "false," represented as \href{https://en.wikipedia.org/wiki/Binary_number}{binary} "1s" and "0s." Because humans cannot easily understand binary data and processing, higher-{}level abstractions of \href{https://en.wikipedia.org/wiki/Machine_code}{machine code} and \href{https://en.wikipedia.org/wiki/Programming_language}{programming languages} are used.
 
Computer processing is not free. Moving data from one point to another -{} the fundamental \href{https://en.wikipedia.org/wiki/Data_transmission}{transmission of information} -{} requires matter and energy, and is bound up in physical reality and the \href{https://en.wikipedia.org/wiki/Thermodynamics}{laws of thermodynamics}. The same applies for changing the state of data, which usually involves moving it somewhere, operating on it, and returning it to its original location. In the real world, even running the simplest calculation has physical and therefore economic cost, and so we must pay for computing.
 \begin{DBKadmonition}{warning}{Important}
 
If these concepts are strange to you, spend some time with the suggested Wikipedia articles, or otherwise researching the topics. Wikipedia in the area of fundamental computer concepts is generally accurate.
 \end{DBKadmonition}
 \begin{wrapfigure}{r}{0.5\textwidth}

\begin{center}
\imgexists{images/1_02-storage-disks.jpg}{{\imgevalsize{images/1_02-storage-disks.jpg}{\includegraphics[width=0.48\textwidth]{images/1_02-storage-disks.jpg}}}}{hard drives in array}
\end{center}
\caption[{Disks in a storage array }]{Disks in a storage array \footnotemark{}}
\end{wrapfigure}
 
\textbf{Storage} But where did the picture come from? The data comprising the pixels needs to be stored somewhere. Sometimes you will hear the technical term "persisted." The combined set of pixels and their precise values can be termed the "state" of the photograph; the digital logic of the filter alters the state, and also needs to save this new state somewhere (otherwise it will be lost).
 
Many technologies \href{http://www.zetta.net/history-of-computer-storage/}{have been used for digital storage.} Increasingly, the IT professional need not be concerned with the physical infrastructure used for storing data. As we will cover in the next section, storage increasingly is experienced as a virtual resource, accessed through executing programmed logic on Cloud platforms. "Underneath the covers" the Cloud provider might be using various forms of storage, from RAM to solid state drives to tapes, but the end user is,  \textbf{ideally}, shielded from the implementation details (part of the definition of a service).
 
However, it is important to understand that in general, storage follows a \href{https://en.wikipedia.org/wiki/Memory_hierarchy}{hierarchy}. Just as we might "store" a document by holding it in our hands, setting it on a desktop, filing it in a cabinet, or archiving it in a banker's box in an offsite warehouse, so computer storage also has different levels of speed and accessibility:
 \begin{itemize}

\item{} On-{}chip registers and cache
 

\item{} Random-{}access memory (RAM), aka "main memory"
 

\item{} On-{}line mass storage, often "disk"
 

\item{} Off-{}line mass storage, e.g. "tape"
 
\end{itemize}
 
If this is unfamiliar, see Wikipedia or research on your own; you should have a basic grasp of this issue.
 \begin{wrapfigure}{r}{0.5\textwidth}

\begin{center}
\imgexists{images/1_02-network-connections.png}{{\imgevalsize{images/1_02-network-connections.png}{\includegraphics[width=0.48\textwidth]{images/1_02-network-connections.png}}}}{cables and equipment}
\end{center}
\caption[{Network cabling in a rack }]{Network cabling in a rack \footnotemark{}}
\end{wrapfigure}
 
\textbf{Network} We can change the state of some data, or store it. We also need to move it. This is the basic concern of \href{https://en.wikipedia.org/wiki/Computer_network}{networking}, to transmit data (or information) from one location to another. If you use your cell phone to look up your bank balance, there is network involved -{} otherwise, how did the data get from the bank's computer in New Jersey to your cell phone in Minnesota? We see evidence of networking every day; you may be familiar with coaxial cables for TV, or telephone lines strung from pole to pole in many areas. However, like storage, there is also a hierarchy of networking:
 \begin{itemize}

\item{} Intra-{}chip pathways
 

\item{} \href{https://en.wikipedia.org/wiki/Motherboard}{Motherboard} and \href{https://en.wikipedia.org/wiki/Backplane}{backplane} circuits
 

\item{} \href{https://en.wikipedia.org/wiki/Local_area_network}{Local area networks}
 

\item{} \href{https://en.wikipedia.org/wiki/Wide_area_network}{Wide area networks}
 

\item{} \href{https://en.wikipedia.org/wiki/Backbone_network}{Backbone networks}
 
\end{itemize}
 
And like storage and compute, networking as a service increasingly is independent of implementation. The developer uses programmatic tools to define expected information transmission, and (again \textbf{ideally}) need not be concerned with the specific networking technologies or architectures serving their needs.
   
