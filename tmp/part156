\subsection{Process modeling}
\label{_process_modeling}\hyperlabel{_process_modeling}%
  
If you page back through this book, you will see many graphics: some are pictures from real life, while others are conceptual. The practice of communicating concepts through graphical forms has a long history and great breadth of application. If you have access to the Microsoft product Visio, you can get a sense of this through looking at the various templates and solutions:
 \begin{wrapfigure}{r}{0.5\textwidth}

\begin{center}
\imgexists{images/5_04-visio.png}{{\imgevalsize{images/5_04-visio.png}{\includegraphics[width=0.48\textwidth]{images/5_04-visio.png}}}}{visio process templates}
\end{center}
\caption{Process modeling templates}
\end{wrapfigure}
 
The idea that a box can represent an activity or objective, and can be linked in sequence to other boxes though lines, has been around since at least the 1920s. Many different visual languages have been developed over the years for various purposes. Some are highly formalized, others less so. The following definitions may help:
 
A \textbf{modeling language} is a set of concepts and definitions that describes a given problem space. Modeling languages can be formalized to different degrees of precision.
 
A \textbf{notation} is a specific set of visual symbols mapped onto a modeling language. One modeling language might have different notations; for example, Data Flow Diagrams have two notations but both communicate essentially the same language.
 
A \textbf{model} is a specific usage of a modeling language and notation to communicate some idea about a system. It may also be a verb, e.g. "I am going to \textbf{model} the system."
 
There are many different forms of modeling, extending far beyond IT and digital management. Scientists develop models of physical processes; financial analysts develop models of the stock market. Different aspects of a digital system might be modeled at different times:
 \begin{itemize}

\item{} The process it is automating might be modeled as part of analysis
 

\item{} Its data structures might be modeled somewhat later
 

\item{} When the system is running under load, capacity analysts might model its consumption of compute and network resources and develop projections for when additional capacity might be needed
 
\end{itemize}
 
Process modeling is therefore only a subset, but an important one. Process analysis is one of most important activities in the broader area of business analysis and architecture, which in turn are key to \hyperlink{product-mgmt}{product management} in general (as we briefly mentioned in Chapter 4).
 
There are many process modeling languages and notations:
 \begin{itemize}

\item{} Generic flowcharting
 

\item{} The IDEF family
 

\item{} The Unified Modeling Language
 

\item{} Business Process Modeling Notation
 
\end{itemize}
 
There are many references on these in the concluding chapter section. We will only discuss some of the more important concepts in this section:
 \begin{itemize}

\item{} The IGOE foundation (Input/Guide/Output/Enabler)
 

\item{} Ordering, conditionality, and synchronization
 

\item{} Swimlanes
 
\end{itemize}
 
\subsubsection{IGOE (Input/Guide/Output/Enabler)}
\label{_igoe_input_guide_output_enabler}\hyperlabel{_igoe_input_guide_output_enabler}%
  
A useful framework for thinking about activities represented as icons is the IGOE approach, originated by the Process Renewal Group \hyperlink{Burlton2001}{[Burlton2001]}. IGOE stands for:
 \begin{itemize}

\item{} Inputs
 

\item{} Guides
 

\item{} Outputs
 

\item{} Enablers
 
\end{itemize}
 \begin{wrapfigure}{r}{0.5\textwidth}

\begin{center}
\imgexists{images/5_04-IGOE.png}{{\imgevalsize{images/5_04-IGOE.png}{\includegraphics[width=0.48\textwidth]{images/5_04-IGOE.png}}}}{IGOE}
\end{center}
\caption{IGOE approach}
\end{wrapfigure}
 
\textbf{Inputs} include the information or event stimulus that initiates the activity. They also include resources that will be consumed in the course of the activity.
 
\textbf{Guides} govern the process, setting constraints and expectations (e.g. current HR policies). They are not consumed.
 
\textbf{Outputs} include the final, value-{}added outcome of the activity, and also serve as a signal for downstream activities to commence.
 
\textbf{Enablers} support the process, without being immediately consumed. Examples include infrastructure and facilities support.
 
The IGOE approach is seen in the classic IDEF0 standard (the terms used there were Inputs, Controls, Outputs, Mechanisms). This is a form of \textbf{functional modeling} which is \textbf{not} event driven but rather is used to scope higher level interactions between areas.
 
The original intent of the IDEF0 standard was for a multi-{}level, decomposition approach, A high level scope would be elaborated thus:
 \begin{wrapfigure}{r}{0.5\textwidth}

\begin{center}
\imgexists{images/5_04-IGOE2.png}{{\imgevalsize{images/5_04-IGOE2.png}{\includegraphics[width=0.48\textwidth]{images/5_04-IGOE2.png}}}}{IGOE}
\end{center}
\caption{Functional relationships}
\end{wrapfigure}
 
However, there is not a clear sense of the events, since the primary objects are still the functions. There also is the temptation to insert extraneous information, as indicated in the line between Facilities Management and IT Asset Management labeled "Provides space for ??".
 
It is true that Facilities Management does provide space for the IT Asset Management Team (in fact, all of these functions provide services to each other), but to draw this would result in a "spaghetti" diagram with several dozen lines and not much explanatory power. Purely functional modeling of this nature is therefore limited in usefulness, although it can be a good place to start.
  
\subsubsection{Ordering, synchronization, and conditionality}
\label{_ordering_synchronization_and_conditionality}\hyperlabel{_ordering_synchronization_and_conditionality}%
  
Activities in process modeling, by contrast, emphasize active verbs:
 \begin{itemize}

\item{} Hire
 

\item{} Assign
 

\item{} Supply
 

\item{} Create
 

\item{} Authorize
 
\end{itemize}
 
Multiple activities can be sequenced and this is often represented as a series of shapes connected by arrows:
 \begin{wrapfigure}{r}{0.5\textwidth}

\begin{center}
\imgexists{images/5_04-ordering1.png}{{\imgevalsize{images/5_04-ordering1.png}{\includegraphics[width=0.48\textwidth]{images/5_04-ordering1.png}}}}{process ordering}
\end{center}
\caption{Basic ordering}
\end{wrapfigure}
 
Notice these activities align to the overall cross-{}functional flow we discussed above:
 \begin{wrapfigure}{r}{0.5\textwidth}

\begin{center}
\imgexists{images/5_04-ordering2.png}{{\imgevalsize{images/5_04-ordering2.png}{\includegraphics[width=0.48\textwidth]{images/5_04-ordering2.png}}}}{ordering}
\end{center}
\caption{Ordered process across silos}
\end{wrapfigure}
 
However, we encounter a complication. In order to describe this process accurately, we should note that some people do not have space assigned, if they are primarily telecommuting and/or working in "hoteling" space. We want to show a decision point, which in many notations is represented by a diamond.
 \begin{wrapfigure}{r}{0.5\textwidth}

\begin{center}
\imgexists{images/5_04-ordering4.png}{{\imgevalsize{images/5_04-ordering4.png}{\includegraphics[width=0.48\textwidth]{images/5_04-ordering4.png}}}}{ordering}
\end{center}
\caption{Decision point}
\end{wrapfigure}
 
Finally, this ordering is taking too long, because people are waiting for space to be assigned before doing anything else. This is a well understood problem; processes can branch and run in parallel (you may well be writing code that works this way; human processes also do this). In UML, the term is "fork" for when processes diverge to run in parallel, and "join" when they must again synchronize for the next activity to continue:
 \begin{wrapfigure}{r}{0.5\textwidth}

\begin{center}
\imgexists{images/5_04-ordering3.png}{{\imgevalsize{images/5_04-ordering3.png}{\includegraphics[width=0.48\textwidth]{images/5_04-ordering3.png}}}}{ordering}
\end{center}
\caption{Forking and joining}
\end{wrapfigure}
 
In the above diagram, we see that 3 activities (including the decision point) can commence independently when the employee is hired, but network access requires that the employee have both an entry in the enterprise directory, as well as their hardware supplied. The entire process is complete when their space, equipment, and access needs have been met.
  
\subsubsection{Swimlanes}
\label{_swimlanes}\hyperlabel{_swimlanes}%
  
We made much of the fact that processes cross functions, and yet with our final diagram we have lost our view of this fact. We can re-{}introduce the functional boundaries through the use of swimlanes (pioneered by Rummler in \hyperlink{Rummler1995}{[Rummler1995]}):
 \begin{wrapfigure}{r}{0.5\textwidth}

\begin{center}
\imgexists{images/5_04-swimlanes.png}{{\imgevalsize{images/5_04-swimlanes.png}{\includegraphics[width=0.48\textwidth]{images/5_04-swimlanes.png}}}}{swimlanes}
\end{center}
\caption{Complex flow across swimlanes}
\end{wrapfigure}
 
Adding the swimlanes helps us understand the cross-{}functional handoffs, and also where certain activities will remain within the scope of one function. Another interesting, finer point is the question of the synch points. Observe the synch point in the Network Management swimlane. Its presence implies that the Network Management function must confirm that the employee has equipment and a directory in the enterprise directory.
 
You may notice that this diagram has been "rotated." The diagram was becoming too long if drawn left to right. UML Activity Diagrams frequently use a top-{}to-{}bottom approach. The meaning of the diagram is not changed.
  
\subsubsection{A final caution on technique}
\label{_a_final_caution_on_technique}\hyperlabel{_a_final_caution_on_technique}%
  
The techniques briefly discussed here can be applied and combined in many different ways, and result in models of large scope and complexity. However there are crucial limitations to visual representations of complexity.
 
There are endless nuances and debates about BPM notations, methodology, and philosophy. Don't get caught up in it. Modeling should generate simple, clear artifacts that are useful by a broad audience, and it should not become an end in itself, or (in general) consume inordinate amounts of time. We will discuss this further in the chapter section on Agile.
 
With the above discussion, we have covered in a summary form the basics of business process modeling. In the next section on Agile and process management, we will discuss various process pitfalls and appropriate Agile and Lean responses.
    
